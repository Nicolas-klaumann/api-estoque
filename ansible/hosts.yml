# ansible/deploy_api.yml
---
- name: Deploy da API de Gestão de Estoque
  hosts: api_server
  become: yes # Permite que o Ansible execute comandos com privilégios de sudo
  vars:
    repo_url: "https://github.com/Nicolas-klaumann/api-estoque.git" # URL HTTPS do seu repositório
    app_dir: "/home/ubuntu/api-estoque" # Diretório onde o projeto será clonado/implantado
    node_version: "18" # Versão do Node.js a ser instalada
    api_port: 3000 # Porta da sua API Node.js

  tasks:
    - name: Atualizar pacotes do apt
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600 # Cache válido por 1 hora

    - name: Instalar dependências (curl, git)
      apt:
        name:
          - curl
          - git
        state: present

    - name: Instalar Node.js e npm usando NVM (Node Version Manager)
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        source ~/.nvm/nvm.sh
        nvm install {{ node_version }}
        nvm use {{ node_version }}
        npm install -g npm@latest
        npm install -g pm2 # pm2 para gerenciar processos Node.js em produção
      args:
        executable: /bin/bash # Garante que o shell seja bash para carregar nvm
        creates: "/home/ubuntu/.nvm/nvm.sh" # Evita que a tarefa seja executada novamente se NVM já estiver lá

    - name: Garantir que o Node.js e npm estejam disponíveis para o usuário ubuntu
      shell: |
        echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
        echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc
        source ~/.bashrc
        # Adicione o caminho do NVM ao PATH para execuções subsequentes
        echo 'export PATH="$HOME/.nvm/versions/node/v{{ node_version }}/bin:$PATH"' >> ~/.bashrc
      args:
        executable: /bin/bash
      # Esta tarefa é um pouco tricky, pois o Ansible pode não ver as variáveis de ambiente recém-configuradas.
      # Vamos garantir os caminhos nos próximos passos também.

    - name: Clonar o repositório da API (ou atualizar se já existir)
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: main # Nome da sua branch principal (geralmente main ou master)
        force: yes # Garante que o repositório seja atualizado para o estado mais recente
      become_user: ubuntu # Executa esta tarefa como o usuário ubuntu (não root)

    - name: Instalar dependências do projeto Node.js
      community.general.npm: # Módulo npm do Ansible
        path: "{{ app_dir }}"
      become_user: ubuntu

    - name: Iniciar ou reiniciar a aplicação com PM2
      shell: |
        source ~/.nvm/nvm.sh # Garante que nvm esteja disponível
        nvm use {{ node_version }} # Usa a versão correta do Node
        cd {{ app_dir }}/src
        pm2 startup systemd -u ubuntu --hp /home/ubuntu # Configura pm2 para iniciar no boot
        pm2 startOrRestart ecosystem.config.js --env production # Use ecosystem.config.js para gerenciar sua app
      args:
        executable: /bin/bash
        chdir: "{{ app_dir }}" # Muda para o diretório raiz da sua aplicação antes de iniciar o pm2
      become_user: ubuntu
      # O comando pm2 startup systemd precisa ser executado como root (sudo), mas o pm2 startOrRestart como usuário.
      # Para simplificar, estamos executando tudo no shell como 'ubuntu' e usando o 'become: yes' no playbook inteiro.
      # Uma abordagem mais robusta para pm2 startup seria separar a tarefa para ser root.
      # Para este exercício, o shell script simplifica.
